version: 2

models:
  - name: dim_listings_cleansed
    description: Cleansed table which contains Airbnb listings.
    columns:
      
      - name: listing_id
        description: Primary key for the listing
        tests:
          - unique
          - not_null
        
      - name: host_id
        description: The hosts's id. References the host table.
        tests:
          - not_null
          - relationships:
              to: ref('dim_hosts_cleansed')
              field: host_id

      - name: room_type
        description: Type of the apartment / room
        tests:
          - accepted_values:
              values: ['Entire home/apt', 'Private room', 'Shared room', 'Hotel room']

      - name: minimum_nights
        description: '{{ doc("dim_listing_cleansed__minimum_nights") }}'
        # tests:
        #   - positive_value

  - name: dim_hosts_cleansed
    columns:
      - name: host_id
        tests:
          - not_null
          - unique
      
      - name: host_name
        tests:
          - not_null
      
      - name: is_superhost
        tests:
          - accepted_values:
              values: ['t', 'f']
  
  - name: fct_reviews
    columns:
      - name: listing_id
        tests:
          - relationships:
              to: ref('dim_listings_cleansed')
              field: listing_id

      - name: reviewer_name
        tests:
          - not_null
      
      - name: review_sentiment
        tests:
          - accepted_values:
              values: ['positive', 'neutral', 'negative']

# schema.yml files are created to to execute tests 
# There are 2 kinds of tests in dbt : 1. generic tests, 2. singular tests
# Generic tests include : unique, not null, accepted_values, relationship 
# we can execute generic tests on any columns of a tables as defined above 
# Singular tests are sql statements which are sppose to give 0 records for the statements
# Singular tests are defined in a seperate tests folder

# use dbt test to execute all tests associated with models 
# use dbt test --select <name_of_the_model> to execute tests for a particular model

# adding description will help in building docs when we execute dbt docs generate 
# dbt will generate html files which we can render on our web server 
# We we decide to depend on dbt server for documentation then execute dbt docs serve
# When we execute dbt docs generate a catalog gets built on the target folder 
# Execute dbt docs serve after the catalog is built 

# To add custom documentation for certain columns create a docs.md file 
# The docs.md will have custom docs macros 

# To edit the overview page of the document create a overview.md file 
# the overview.md file contains overview macros which we can add 

# When defining overview.md we can have images from external locations 
# What happens when the image link breaks, so to be safe we need to have custom images 
# stored in the asset folder 